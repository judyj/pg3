README.md

Typos
x o Line 7 "Do now" --> "Do not"
x o Line 17 "process-t-process" --> "process-to-process"
May be helpful to readers who may cat or print the file to have file lines not exceed 80-100
characters.
x I wouldn't list the rake tasks here, but instead tell the user to run rake -T. This way, the
x README.md does not have to be updated if the rake tasks change. (Document once....)
x I wouldn't list the usage here, but instead tell the user to run:
x processgraph --help
x Again, this eliminates the need to refresh the README.md every time the code changes.


processgraph
Usage should be cleaned up.
o It is not clear that inputs (.ss files) will be generated in some cases and not in others.
o There is no indication that the “processgraph_output/<site_name>” directory
will be created and it will contain generated process_list, *.ss, *.dot and *.png
files. Should this be an optional argument with a default (e.g., a results directory)?
o From execution of the program, the output filename appears really to be an output
filename root. When the code is executed with the -o option, base name is used as
the root of generated ss, dot, and png files. This isn’t what I expected from the
description. I expected to be able to specify a fully qualified output filename for my
final .png file.
o Each parameter name in the long description should be a single string. For example
‘--input file NAME’ should be ‘--input FILENAME’
o All parameter descriptions should follow the same formatting convention. For
example, “Connection Type” should be “Connection type”.
o “Outputfilename” should be “Output file” and the description did not make
sense to me.
o Each option description line should be broken up so that it does not exceed 80-100
characters. (OptionParser has a multi-line mechanism to help you with this.)
Each error should return a non-zero return code and emit messages to stderr. For example,
lines 43-45 could look like the following:
$stderr.puts “Invalid connection type: #{con_type)”
exit(1)
Lines 22, 26, 30, 50: commented out debug lines should be either (1) removed or (2) not be
commented out and have a $debug switch on them. For example
$debug = false
...
puts “some debug line” if $debug
Then, (as is appropriate for more complex programs), the debug logging could be enabled
by a command line option (-v, --verbose or -d, --debug).
It would be helpful to use symbols for the connection types (:port, :process, :ip).
This makes the code more understandable andput eliminates the need for the comments on
lines 32-34.
Line 56 should rescue the exception thrown by OptionParser
(OptionParser::ParseError) and print it out ($stderr.puts e.message), instead of
guessing what the error will be.
Execution problems found:
o Specifying output filename does not seem to work in the evaluation environment.
When no pre-existing processgraph_output directory exists,
processgraph -s site6 -o myreport
generated an error message and the following files
Error: in routesplines, Pshortestpath failed

processgraph_output/site6/process_list
processgraph_output/site6/process_list.ss
processgraph_output/site6/myreport.ss
processgraph_output/site6/myreport.dot
When I ran processgraph -s mysite, the following messages were generated
numerous times:
libpath/shortest.c:324: triangulation failed
libpath/shortest.c:207: cannot find triangle path


If these messages are not problems, they should be suppressed.
When processgraph -s mysite -i inputdir was executed and inputdir was an
existing, unreadable directory, processgraph created a file named inputdir.ss. It
should have failed.
When the png file failed to be created, processgraph did not emit a warning message and
it did not return a non-zero return code.


simp-processgraph.rb


Remove lines 15-19 and 26-27? When installed as a gem, none of this is necessary.
The classes in this file should be in a namespace (module). For example, Simp::Tools.
Line 35: The attr_accessor list in ProcessList should be removed because
o I don’t see how they are needed (does any user of a ProcessList instance need to
read and write the @infile and @outfile variables?)
o Local variables within the code with the same name as the methods generated by
the attr_acessor declaration make the code confusing.
Lines 38 and 45. @infile is not really used, so in line 38, set @inputfile to infile
and remove line 45
Lines 39 and 46. @outfile is not really used, so in line 39, set @outputfile to outfile
and remove line 45
Line 48: @con_type should be validated here, before any further processing is done.
Line 51: ’process_list’ is a constant value, so please use a class constant instead. For
example (around line 36)
DEFAULT_INFILE_ROOT = ‘process_list’


Lines 52, 60, 64, 66, 69, ... please use :none, :file,:dir, and :newfile Ruby
symbols
Lines 54-70
o Could be moved to a small method to make the code more readable.
o Why are we only backing up a ss file with the default root name?
Around line 67, check if the directory is readable and throw an exception if not. This means
the outer script will have to handle the exception appropriately, if you don’t want it to spew a
long backtrace to the user.
Line 77, 84, 93 Why is the_start used? It is not necessary.
Lines 84-87, 589-608, 688. Ruby symbols, please. The code will be faster and just as
understandable.
Lines 111-123. Consider using a Set or SortedSet (available with requires ‘set’) for
@site_list to simplify this logic. Otherwise, the variable on line 124, add_site, should
be changed as it is confusing to have a method add_site() that contains a local variable
add_site.
Lines 137-218 Can graph_processes() be broken up into smaller methods? The
method is long and it looks like there is a bit of repeated code that could be moved to other
methods.
Ditto for lines 220-305, graph_connections().
Line 302. What does this comment mean?
Line 303. The return code of the spawned process needs to be evaluated. If the process
fails, the code should raise an exception, as this is a catastrophic error.
Consider using a Set or SortedSet for HostName’s @ip_list, IPAddr's
@proc_list, and ProcessName’s @port_list. (You just have to make sure you have
an eql?() and hash() method for the class being inserted into the set.)
file_input() and print_array() should not be a global methods but a methods of
the only class that uses it, ProcessList.
o If file_input() were to remain as a global method, I’m not sure that it makes
sense for it to have instance variables (@variable). Instance variables are
normally used in classes.
file_input() does more than read input file(s). It creates an ss file, when none exists.
From an OO perspective, I feel like this is too much responsibility. Seems like the creation
of an ss file should be outside the scope of this method. This method should only focus on
loading ss results. This type of refactoring would also allow the smaller, individual methods
to be more readily unit tested via rspec.
In file_input(), assignment of inputfile, outputfile, filetype, and site_name
parameters to local variables and then use of local variables is not needed.
Line 491. The return code of the spawned process needs to be evaluated. If the process
fails, the code should raise an exception, as this is a catastrophic error.
Lines 495-499. Consider using Dir.glob() and then Array.map!(), if needed.
Lines 501-503. This looks like a catastrophic error. If so, it should throw an exception and
let the outer script log the failure and exit appropriately.
Lines 516, 521 Can counter be removed? Doesn’t look like it is used anywhere else.
Lines 517 & 573 and 619 & 643. What if the IO operation on the file fails? Seems like a
catastrophic failure that should result in an exception being thrown. If the software was
refactored, both these cases could be easily unit tested.
Line 616. Remove, as that variable is unused.


Line 644, 648 Log to stderr and prepend the message with “Warning:”. If there is a
malformed line, should this be a catastrophic error?
Line 686-688, please use block form of File.open() so that file is closed here, not when
the process exits.
Line 686. If the file can’t be written, an exception will be thrown. Is the noisy ruby backtrace
useful to the end user? You may want to consider handling this differently.
Since this is purely Ruby code, we should use SimpleCov to gather code-coverage metrics
when the rspec tests are run. This will help pinpoint what code is not being executed during
the tests, and thus, the code most likely to still have bugs.
The inconsistent use of parentheses in statements bothered me. For example, on line 65:
elsif ( (File.file?@inputfile) && (File.extname(@inputfile) == ".ss") )
Why were parentheses used in File.extname and not File.file?? (I, personally would
always use the parentheses, but as long as it is consistent in a file, I can live with it either
way.)
